The repeat expansions were simulated following a strategy similar to the one used by To emulate a true repeat expansion within a human genome, repeats were simulated using a strategy similar to that taken by BamSurgeon(Ewing et al. 2015) [PMID: 25984700]. Briefly, a region around a non-expanded target repeat in a control WGS sample was replaced with synthetic reads supporting an expansion (Figure S2#). WGS dataset, cutting out a region around a repeat expansion, and concatenating this with a simulated repeat expansion to produce a new sample which harbors a repeat expansion (Figure S#).  Details of this process are as follows: 
Specifically,
The WGS sample HG03522, Family NG109) from the Polaris Kids cohort (Illumina n.d.), sequenced to ~36x coverage, was selected as a background genome for incorporation of repeat expansions. Links to raw data for this sample can be found online (https://github.com/Illumina/Polaris/wiki/HiSeqX-Kids-Cohort).  Raw data for this individual was mapped against the GRCh37-lite genome (http://www.bcgsc.ca/downloads/genomes/9606/hg19/1000genomes/bwa_ind/genome/GRCh37-lite.fa) using BWA mem (v0.7.5) with default settings. Mapped reads were converted into binary format, sorted, and indexed using Samtools (v1.3.1). (GetBackgroundGenome.sh).
A FASTA file containing the expanded repeat along with 2Kb flanking sequence upstream and downstream of the repeat was generated for read simulation.
Reads were simulated from the FASTA file using ART v2.5.8 (Huang et al. 2012)
Repeats are simulated based on input table of repeat loci in 3 steps:
Generation of a Repeat.fasta sequence including flanking sequence 2kb upstream of repeat start and 2kb downstream of repeat end, and replacement of the existing repeat genomic sequence with expanded repeat copies. For simple repeats and VNTRs, the script SimFasta.py was used, and for complex repeat events the STR_Locus_Creator tool was used. 
Simulation of reads from the Repeat.fasta using ART (v2.5.8) to generate paired-end fastqs using the parameters for readlength (150 bp), depth (36x), mean fragment length (460), and fragment length standard deviation (115) to match that of sample HG03522. These values were acquired for sample HG03522 using samtools stats (v1.3.1). 
Mapping of simulated reads to the GRCh37-lite reference genome using BWA mem and samtools as described above.
Scripts for steps A, B, C, are available for each defined repeat table (Create_STR_Simulations_Pathogenic_Small.sh, Create_STR_Simulations_Pathogenic_Large.sh, Create_STR_Simulations_Pathogenic_Complex.sh, Create_STR_Simulations_NonPathogenic_STR.sh, Create_STR_Simulations_NonPathogenic_VNTR.sh) 
Repeat fasta, fastq, and BAM files can be found at <https://github.com/Phillip-a-richmond/STR_Analysis/tree/master/STR_Simulation> 
A cut-out negative region is defined for each of the repeats, such that all regions of the genome are included except a given +/- 2kb region around the target repeat locus (CreateCutoutBed.py). 
Simultaneous cutting-out (samtools view -L negativeRegion.bed) and merging (samtools merge) of the human genome sample HG03522 with the mapped repeat reads produces a final repeatExpansion.bam file. This file is then indexed with samtools, and used for downstream STR calling. (EmbedAndCallSTRs_Pathogenic_Large.sh, EmbedAndCallSTRs_Pathogenic_Small.sh, EmbedAndCallSTRs_Pathogenic_Complex.sh, EmbedAndCallSTRs_NonPathogenic_STR.sh, EmbedAndCallSTRs_NonPathogenic_VNTR.sh).
The scripts (GetBackgroundGenome.sh, Create_STR_*.sh, CreateCutoutBed.py, EmbedAndCall*.sh) that were used to perform the above analyses can be found here https://github.com/Phillip-a-richmond/STR_Analysis/tree/master/STR_Simulation 
